#################
#
# lift_over_from_recode_reverse
# Ryan Neff
# Nov 13, 2012
#
# Reads in a file generated by recode coordinates from VCF and 
# changes the coordinates in the alternate VCF back to reference.
#
##################

#!usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Scalar::Util qw(looks_like_number);

# declare variables
my $inputfilename;
my $recodefilename;
my $includeinfo;

# validate init
GetOptions( 'vcffile=s' => \$inputfilename,
			'recodefile=s' => \$recodefilename,
		    'includeinfo' => \$includeinfo );
		    
open FILE, '<'.$inputfilename or 
die "Usage: perl lift_over_from_recode.pl --vcffile FILENAME.vcf --recodefile RECODE.txt > output.vcf";

open FILE2, '<'.$recodefilename or 
die "Usage: perl lift_over_from_recode.pl --vcffile FILENAME.vcf --recodefile RECODE.txt > output.vcf";

# start analysis
print STDERR ("Starting analysis...\n");

# globals
my $lineinVCF;
my $delta = 0;
my $nextdelta = 0;
my $current_chr = 1;
my $next_change_coord = 0;
my $conflict_coord = 0;

# read in each line of VCF
while (<FILE>){
	
	$lineinVCF++; # count lines 
	# print friendly updates
	my $rem = $lineinVCF % 10000;
	if($rem == 0){
		print STDERR ("Read $lineinVCF lines\n");
	}
	
	# start processing the line, determine type of line
	my @linearray = split(/\t/,$_,9);
	my $firstchar = (split "",$_,2)[0]; # split it into characters
	my $secondchar = (split "",$_,3)[1]; # split it into characters
	
	if($firstchar eq "#" && $secondchar eq "#"){ # if we're in the header, just print the header
		print STDOUT $_;
		next;
	}
	elsif($firstchar eq "#"){ # when we've reached the labels, print them
		print STDOUT ("$_");
		next;
	}
	
	
	# set current chomosome number and reference position
	my $chr_num = $linearray[0];
	my $chr_num_file;
	if ($chr_num == 24){
		$chr_num_file = "X";
	}
	elsif ($chr_num == 25){
		$chr_num_file = "Y";
	}
	elsif ($chr_num >= 2 && $chr_num <= 23){
		$chr_num_file = $chr_num - 1;
	}
	else{
		next;
	}
	my $ref_pos = $linearray[1];
	
	# read the recode file until we find the current delta and next change coordinate
	if (($next_change_coord < $ref_pos && $chr_num == $current_chr) || $chr_num > $current_chr){
		while(<FILE2>){
			my $firstchar_r = (split "",$_,2)[0]; # split it into characters
			if($firstchar_r eq "#"){ # if there's a comment mark, do nothing
				next;
			}
			if($firstchar_r eq "S"){ # if there's nothing, stop
				exit 0;
			}
			my @linearray_r = split(/\t/,$_,8);
			my $chr_num_r = $linearray_r[0];
			if ($chr_num_r eq "X"){
				$chr_num_r = 24;
			}
			elsif ($chr_num_r eq "Y"){
				$chr_num_r = 25;
			}
			my $ref_end_r = $linearray_r[2];
			if ($ref_end_r > $ref_pos && $chr_num eq $chr_num_r){ # if the recode coord is after the VCF coord, stop
				$current_chr = $chr_num_r;
				$next_change_coord = $ref_end_r;
				$conflict_coord = $linearray_r[1];
				$delta = $nextdelta;
				$nextdelta = $linearray_r[6];
				last;
			}
			elsif ($ref_end_r < $ref_pos && $chr_num == $chr_num_r){
				$delta = $nextdelta;
				$nextdelta = $linearray_r[6];
				next;
			}
			if ($chr_num_r > $chr_num){ # if we reached the next chr, set it and break, leaving delta the same
				$current_chr = $chr_num_r;
				$next_change_coord = 0;
				$conflict_coord = 0;
				last;
			}
			if ($chr_num_r < $chr_num){ # if the VCF went to the next chromosome
				next;
			}
		}
	}
	#debug
	if ($current_chr < $chr_num){
		print STDERR ("Error detected. STOP\n");
		exit 1;
	}
	if($conflict_coord <= $ref_pos && $next_change_coord >= $ref_pos){
		print STDERR ("Can't lift over chr$chr_num $ref_pos.\n");
		next;
	}
	my $new_pos = $ref_pos + $delta;
	$linearray[1] = $new_pos;
	$linearray[0] = sprintf("chr%s","$chr_num_file");
	#$linearray[8] = ""; # debug
	my $newline = join("\t",@linearray);
	# my $newline = join("\t",@linearray,"\n"); # debug
	print STDOUT ("$newline");		
}
# end of program
close(FILE);
exit 0;
